1. Мерки на перформансите на алгоритмите за распоредување
2. Наброј ги алгоритмите кај batch, interactive i real-time системи (кој алгоритам за кој тип на систем е)
3. Round Robin - како работи, колку најмногу ќе чека еден процес ако имаме n процеси и квантумот е со големина q? Дискутирај ја големината на квантумот.
4. Разлики помеѓу распоредување со приоритети и повеќекратни редици
5. Како Shortest Process Nеxt го предвидува времето на извршување на процесите? (изведи ја формулата)
6. Нека има m периодични настани. Настанот i се случува со периода Pi и за да се опслужи бара Ci секунди. Под кој услов може да се поднесе оптоварувањето кај системи во реално време?
7. Што се случува при распоредување на нишки кога тие се во кориснички простор? Дали е можно, во ваков случај секвенвцата на извршување на нишките за еден временски квантум да биде A1, A2, A3, A1, A2, A3 и зошто? Каков ќе биде случајот ако нишките се во јадрото? Наведи пример на можна секвенца. Што се случува при I/O блок во двете ситуации?

ВО КОРИСНИЧКИ ПРОСТОР
- Јадрото не знае дека има нишки, бира еден процес, на пример А и како обично , му доделува временски квантум
- Распоредувачот на нишки понатаму одредува на која нишка ке и го додели квантумот на пример А1
- Таа нишка може да го искористи целото време за тој процес, но сепак тоа не влијае на времето за другите процеси
- Ако го искористи целиот квантум на процесот, јадрото ќе почне со извршување на некој друг процес
- Кога пак ќе му дојде редот на А, А1 ќе продолжи да се извршува
- Нека нишките на А имаат малку работа по CPU burst, на пример 5msec работа во 50msec квантум. Секој процес ќе се извршува малки, па ќе го врати CPU-то до распоредувачот. Тоа може да води до секвенцата А1, А2, А3, А1, А2, А3, А1, А2, А3.. пред јадрото да премине на процес В

Распоредувачот на нишки се наоѓа во нишката, јадрото не знае за неговото постоење и не му се меша. Јадрото само рекло сега нека иде процес А и толку, он внатре шо сака нека прави. 
А ако беа нишките во јадрото, оно води сметка која нишка кога ќе се извршува и квантумот го доделува на нишките, а не на процесите како претходно.

Распоредувачот на нишки се наоѓа во процесот*
значи
1. кориснички простор - јадрото му го дава процесорското време на процес
1. кориснички простор - јадрото и го дава процесорското време на нишка



мишко кажал битно е да знаеме разлики

распоредување со приоритети и повеќекратни редови

кај приоритетите, додека не ги заврши сите процеси со највисок приоритет, не ги ни гледа тие надоле

кај повеќекратните редови на тие со највисок приоритет им дава најголем квантум

но сепак им дава квантуми и на тие со понизок приоритет, соодветно